—Å–µ–π—á–∞—Å —è —Ç–µ–±–µ –ø—Ä–∏—à–ª—é –≤–µ—Å—å –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —è–∑—ã–∫ –∏ —Å–¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω –¥–ª—è(errors_ticket_page.dart, random_ticket_page.dart, ticket_page.dart, app_theme.dart), –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –Ω—É–∂–Ω—ã–π –¥–∏–∑–∞–π–Ω. –≤–æ—Ç –ø—Ä–æ–º–ø—Ç:

üé® –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
	‚Ä¢	–û—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç: –Ø—Ä–∫–∏–π —Å–∞–ª–∞—Ç–æ–≤–æ-–ª–∞–π–º–æ–≤—ã–π (#D7FF56 –∏–ª–∏ –±–ª–∏–∑–∫–∏–π –æ—Ç—Ç–µ–Ω–æ–∫). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–æ–≥–æ—Ç–∏–ø–µ, –∫–Ω–æ–ø–∫–∞—Ö –∏ –∫–∞–∫ —Ñ–æ–Ω –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ.
	‚Ä¢	–§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç: –ì–ª—É–±–æ–∫–∏–π —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π/–≥—Ä–∞—Ñ–∏—Ç–æ–≤—ã–π (#1C1C1E –∏–ª–∏ –æ–∫–æ–ª–æ —Ç–æ–≥–æ). –ó–∞–¥–∞–µ—Ç –æ–±—â–∏–π —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω, —Å–æ–∑–¥–∞—é—â–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.
	‚Ä¢	–¢–µ–∫—Å—Ç: –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –∏ –±–µ–ª—ã–π (#F5F5F5, #E5E5E7) –¥–ª—è —Ö–æ—Ä–æ—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ —Ç—ë–º–Ω–æ–º —Ñ–æ–Ω–µ.
	‚Ä¢	–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞: –ë–µ–ª—ã–µ –∏ —á—É—Ç—å –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω—ã–µ —Å–µ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∏–∫–æ–Ω–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è.

‚∏ª

üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

–ö–Ω–æ–ø–∫–∏:
	‚Ä¢	–§–æ—Ä–º–∞: –ö—Ä—É–≥–ª–∞—è –∏–ª–∏ —Å —Å–∏–ª—å–Ω—ã–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º (full rounded).
	‚Ä¢	–†–∞–∑–º–µ—Ä: –£–º–µ—Ä–µ–Ω–Ω–æ –±–æ–ª—å—à–∏–µ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –∫–∞—Å–∞–Ω–∏—è), –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏.
	‚Ä¢	–¶–≤–µ—Ç: –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π (—Å–∞–ª–∞—Ç–æ–≤–æ-–ª–∞–π–º–æ–≤—ã–π), –∏–∫–æ–Ω–∫–∏ –≤–Ω—É—Ç—Ä–∏ ‚Äî —Ç—ë–º–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞.
	‚Ä¢	–°–æ—Å—Ç–æ—è–Ω–∏—è: –ù–µ—Ç —Ç–µ–Ω–µ–π, —Ñ–æ–∫—É—Å –Ω–∞ —á–∏—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã –∏ –ø—Ä–æ—Å—Ç–æ—Ç—É. –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —è—Ä—á–µ.

–ò–∫–æ–Ω–∫–∏:
	‚Ä¢	–õ–∏–Ω–µ–π–Ω—ã–µ, –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ, —Ö–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ–º—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–Ω–æ—Ö—Ä–æ–º–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞.
	‚Ä¢	–†–∞–∑–º–µ—Ä –∏ —Å—Ç–∏–ª—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã —Å –æ–±—â–µ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ª—ë–≥–∫–æ—Å—Ç—å—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.

‚∏ª

üßæ –¢–µ–∫—Å—Ç
	‚Ä¢	–®—Ä–∏—Ñ—Ç: –ë–µ–∑ –∑–∞—Å–µ—á–µ–∫, –≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ-—Ç–æ –Ω–∞–ø–æ–¥–æ–±–∏–µ SF Pro –∏–ª–∏ Inter.
	‚Ä¢	–†–∞–∑–º–µ—Ä—ã:
	‚Ä¢	–ó–∞–≥–æ–ª–æ–≤–∫–∏: ~20‚Äì24 pt.
	‚Ä¢	–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: ~14‚Äì16 pt.
	‚Ä¢	–ü–æ–¥–ø–∏—Å–∏ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ~12 pt.
	‚Ä¢	–¶–≤–µ—Ç: –ë–µ–ª—ã–π/—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –Ω–∞ —Ç—ë–º–Ω–æ–º —Ñ–æ–Ω–µ.
	‚Ä¢	–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: –í –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é, —Å —Ö–æ—Ä–æ—à–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏.

‚∏ª

üìê –û—Ç—Å—Ç—É–ø—ã –∏ —Å–µ—Ç–∫–∞
	‚Ä¢	–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã: –ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–µ, ~16‚Äì24 px –≤–æ–∫—Ä—É–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
	‚Ä¢	–°–µ—Ç–∫–∞: 4/8 pt –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ –∏ –¥–µ—Å–∫—Ç–æ–ø.
	‚Ä¢	–ú–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–∑–¥—É—Ö–∞, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏ —á–∏—Å—Ç–æ—Ç–µ.

‚∏ª

üß© –ö–∞—Ä—Ç–æ—á–∫–∏ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
	‚Ä¢	–§–æ—Ä–º—ã: –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã, —Ä–∞–¥–∏—É—Å ~20‚Äì24 px.
	‚Ä¢	–§–æ–Ω: –õ—ë–≥–∫–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã, –∏–Ω–æ–≥–¥–∞ —Å –º—è–≥–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å–≤–µ—á–µ–Ω–∏–µ–º.
	‚Ä¢	–ö–æ–Ω—Ç–µ–Ω—Ç: –í–∏–¥–µ–æ- –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ —Å–æ—á–Ω—ã–µ, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —ç—Å—Ç–µ—Ç–∏—á–Ω–æ—Å—Ç—å.

‚∏ª

üîÑ –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã (–ø–æ –æ—â—É—â–µ–Ω–∏—è–º)
	‚Ä¢	–í–µ—Ä–æ—è—Ç–Ω—ã –º—è–≥–∫–∏–µ, –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏.
	‚Ä¢	–°–∫—Ä–æ–ª–ª –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—â—É—â–∞—Ç—å—Å—è ‚Äú–∂–∏–≤—ã–º–∏‚Äù, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏.

‚∏ª

–≠—Ç–æ—Ç —Å—Ç–∏–ª—å –æ—Ç–ª–∏—á–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö, —Ç–∞–∫ –∏ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö: –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–µ, –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–∞—Ö –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–π —Å–µ—Ç–∫–æ–π –∏ –ø–∞–Ω–µ–ª—è–º–∏.

–∫–æ–¥:

// lib/features/favorites/ui/favorites_page.dart
import 'package:flutter/material.dart';
import 'package:impulse/core/services/api_client.dart';
import 'package:impulse/data/models/question_model.dart';

class FavoritesPage extends StatefulWidget {
  final String? userId;

  const FavoritesPage({super.key, required this.userId});

  @override
  State<FavoritesPage> createState() => _FavoritesPageState();
}

class _FavoritesPageState extends State<FavoritesPage> {
  late final ApiClient _client;
  late Future<List<QuestionModel>> _favoritesFuture;
  bool _isLoading = false;
  List<QuestionModel> _favorites = [];

  @override
  void initState() {
    super.initState();
    _client = ApiClient(userId: widget.userId);
    _favoritesFuture = _loadFavorites();
  }

  Future<List<QuestionModel>> _loadFavorites() async {
    setState(() => _isLoading = true);
    try {
      final favorites = await _client.getFavoriteQuestions();
      setState(() {
        _favorites = favorites;
        _isLoading = false;
      });
      return favorites;
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ: $e')),
      );
      return [];
    }
  }

  bool _isRefreshing = false;

  Future<void> _refreshFavorites() async {
    if (_isRefreshing) return;
    setState(() => _isRefreshing = true);
    try {
      final updatedFuture = _loadFavorites();
      setState(() {
        _favoritesFuture = updatedFuture;
      });
    } finally {
      setState(() => _isRefreshing = false);
    }
  }

  Future<void> _toggleFavorite(QuestionModel question) async {
    try {
      await _client.removeFromFavorites(question.id);
      setState(() {
        question.isFavorite = false;
      });
      await _refreshFavorites();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ü–∏—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–û–±—Ä–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _refreshFavorites,
          ),
        ],
      ),
      body: FutureBuilder<List<QuestionModel>>(
        future: _favoritesFuture,
        builder: (context, snapshot) {
          if (_isLoading) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return _buildErrorView(snapshot.error.toString());
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return _buildEmptyView();
          }

          final favorites = snapshot.data!;
          return AnimatedList(
            padding: const EdgeInsets.symmetric(vertical: 8),
            initialItemCount: favorites.length,
            itemBuilder: (context, index, animation) {
              final question = favorites[index];
              return SlideTransition(
                position: Tween<Offset>(
                  begin: const Offset(1, 0),
                  end: Offset.zero,
                ).animate(CurvedAnimation(
                  parent: animation,
                  curve: Curves.easeOut,
                )),
                child: _buildQuestionCard(context, question),
              );
            },
          );
        },
      ),
    );
  }

  Widget _buildErrorView(String error) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(Icons.error_outline, size: 48, color: Colors.red),
          const SizedBox(height: 16),
          Text('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è', style: Theme.of(context).textTheme.titleLarge),
          const SizedBox(height: 8),
          Text(error, textAlign: TextAlign.center, style: Theme.of(context).textTheme.bodyMedium),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: _refreshFavorites,
            child: const Text('–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É'),
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyView() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(Icons.star_border, size: 48, color: Colors.amber),
          const SizedBox(height: 16),
          Text('–ù–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å', style: Theme.of(context).textTheme.titleLarge),
          const SizedBox(height: 8),
          const Text(
            '–î–æ–¥–∞–≤–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ, —ñ –≤–æ–Ω–∏ –∑\'—è–≤–ª—è—Ç—å—Å—è —Ç—É—Ç',
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildQuestionCard(BuildContext context, QuestionModel question) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      color: Color(0xFF1C1C1E), // –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(24), // –°–∏–ª—å–Ω–µ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—è
      ),
      child: ExpansionTile(
        title: Text(
          question.question,
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            color: Colors.white, // –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
          ),
        ),
        children: [
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                if (question.image != null && question.image!.isNotEmpty)
                  Padding(
                    padding: const EdgeInsets.only(bottom: 16),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(16),
                      child: Image.network(
                        '${AppConfig.apiBaseUrl}/image?path=${question.image!}',
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                Text(
                  question.explanation,
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: Colors.white, // –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton.icon(
                      icon: const Icon(Icons.star, color: Colors.amber),
                      label: const Text('–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–æ–≥–æ'),
                      onPressed: () => _toggleFavorite(question),
                      style: TextButton.styleFrom(
                        foregroundColor: Color(0xFFD7FF56), // –°–∞–ª–∞—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// lib/features/home/ui/main_menu_page.dart
import 'package:flutter/material.dart';
import 'package:impulse/app_theme.dart';
import 'package:impulse/features/home/widgets/progress_widget.dart';
import 'package:impulse/features/settings/ui/settings_page.dart';
import 'package:impulse/features/feedback/ui/feedback_page.dart';
import 'package:impulse/features/themes/ui/theme_list_page.dart';
import 'package:impulse/features/ticket/ui/errors_ticket_page.dart';
import 'package:impulse/features/ticket/ui/random_ticket_page.dart';
import 'package:impulse/features/favorites/ui/favorites_page.dart';

class MainMenuPage extends StatelessWidget {
  final String? userId;

  const MainMenuPage({super.key, required this.userId});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF1C1C1E), // –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
      appBar: AppBar(
        title: const Text('–Ü–º–ø—É–ª—å—Å –ü–î–†'),
        backgroundColor: Color(0xFF1C1C1E), // –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
        actions: [
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: () => Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => SettingsPage(userId: userId),
              ),
            ),
          ),
        ],
      ),
      drawer: AppDrawer(userId: userId),
      body: Column(
        children: [
          const SizedBox(height: 16),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: ProgressWidget(userId: userId),
          ),
          const SizedBox(height: 24),
          Expanded(
            child: GridView.count(
              padding: const EdgeInsets.all(16),
              crossAxisCount: 2,
              childAspectRatio: 1.2,
              mainAxisSpacing: 16,
              crossAxisSpacing: 16,
              children: [
                _buildMenuButton(
                  context,
                  icon: Icons.book,
                  label: '–¢–µ–º–∏',
                  color: Color(0xFFD7FF56), // –°–∞–ª–∞—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä
                  onTap: () => _navigateTo(context, ThemeListPage(telegramUserId: userId)),
                ),
                _buildMenuButton(
                  context,
                  icon: Icons.help_outline,
                  label: '–ë—ñ–ª–µ—Ç',
                  color: Color(0xFFD7FF56), // –°–∞–ª–∞—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä
                  onTap: () => _navigateTo(context, RandomTicketPage(
                    telegramUserId: userId,
                    onProgressUpdated: () {},
                  )),
                ),
                _buildMenuButton(
                  context,
                  icon: Icons.error_outline,
                  label: '–ü–æ–º–∏–ª–∫–∏',
                  color: Color(0xFFD7FF56), // –°–∞–ª–∞—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä
                  onTap: () => _navigateTo(context, ErrorsTicketPage(
                    userId: userId,
                    onProgressUpdated: () {},
                  )),
                ),
                _buildMenuButton(
                  context,
                  icon: Icons.star,
                  label: '–û–±—Ä–∞–Ω–µ',
                  color: Color(0xFFD7FF56), // –°–∞–ª–∞—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä
                  onTap: () => _navigateTo(context, FavoritesPage(userId: userId)),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _navigateTo(BuildContext context, Widget page) {
    Navigator.push(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => page,
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(
            opacity: animation,
            child: child,
          );
        },
      ),
    );
  }

  Widget _buildMenuButton(
      BuildContext context, {
        required IconData icon,
        required String label,
        required Color color,
        required VoidCallback onTap,
      }) {
    return Card(
      elevation: 0,
      color: Color(0xFF2C2C2E), // –¢–µ–º–Ω—ñ—à–∞ –∫–∞—Ä—Ç–∫–∞
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(24), // –°–∏–ª—å–Ω–µ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—è
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(24),
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: color.withOpacity(0.2),
                  shape: BoxShape.circle,
                ),
                child: Icon(icon, size: 32, color: color),
              ),
              const SizedBox(height: 12),
              Text(
                label,
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  color: Colors.white, // –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class AppDrawer extends StatelessWidget {
  final String? userId;

  const AppDrawer({super.key, required this.userId});

  @override
  Widget build(BuildContext context) {
    return Drawer(
      backgroundColor: Color(0xFF1C1C1E), // –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          DrawerHeader(
            decoration: BoxDecoration(
              color: Color(0xFFD7FF56), // –°–∞–ª–∞—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '–Ü–º–ø—É–ª—å—Å –ü–î–†',
                  style: TextStyle(
                    color: Colors.black, // –ß–æ—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  userId ?? '–ì—ñ—Å—Ç—å',
                  style: const TextStyle(
                    color: Colors.black87,
                    fontSize: 16,
                  ),
                ),
              ],
            ),
          ),
          ListTile(
            leading: const Icon(Icons.home, color: Colors.white),
            title: const Text('–ì–æ–ª–æ–≤–Ω–∞', style: TextStyle(color: Colors.white)),
            onTap: () {
              Navigator.pop(context);
            },
          ),
          ListTile(
            leading: const Icon(Icons.settings, color: Colors.white),
            title: const Text('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', style: TextStyle(color: Colors.white)),
            onTap: () {
              Navigator.pop(context);
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => SettingsPage(userId: userId),
                ),
              );
            },
          ),
          ListTile(
            leading: const Icon(Icons.feedback, color: Colors.white),
            title: const Text('–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤\'—è–∑–æ–∫', style: TextStyle(color: Colors.white)),
            onTap: () {
              Navigator.pop(context);
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => FeedbackPage(userId: userId),
                ),
              );
            },
          ),
          const Divider(color: Colors.grey),
          ListTile(
            leading: const Icon(Icons.info, color: Colors.white),
            title: const Text('–ü—Ä–æ –¥–æ–¥–∞—Ç–æ–∫', style: TextStyle(color: Colors.white)),
            onTap: () {
              showAboutDialog(
                context: context,
                applicationName: '–Ü–º–ø—É–ª—å—Å –ü–î–†',
                applicationVersion: '1.0.0',
                applicationIcon: const Icon(
                  Icons.bolt,
                  color: Color(0xFFD7FF56), // –°–∞–ª–∞—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}

// lib/features/home/widgets/progress_widget.dart
import 'package:flutter/material.dart';
import 'package:impulse/core/services/api_client.dart';
import '../../../app_theme.dart';

class ProgressWidget extends StatefulWidget {
  final String? userId;

  const ProgressWidget({super.key, required this.userId});

  @override
  State<ProgressWidget> createState() => _ProgressWidgetState();
}

class _ProgressWidgetState extends State<ProgressWidget> {
  final _client = ApiClient();
  Map<String, dynamic> _progress = {
    'total': 0,
    'correct': 0,
    'wrong': 0,
    'accuracy': 0.0,
  };
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadProgress();
  }

  Future<void> _loadProgress() async {
    try {
      final progress = await _client.getUserProgress();
      if (mounted) {
        setState(() {
          _progress = progress;
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() => _isLoading = false);
      }
      debugPrint('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É: $e');
    }
  }

  void _refreshProgress() {
    setState(() => _isLoading = true);
    _loadProgress();
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    final accuracy = (_progress['accuracy'] * 100).toStringAsFixed(1);
    return Card(
      elevation: 0,
      color: Color(0xFF2C2C2E), // –¢–µ–º–Ω—ñ—à–∞ –∫–∞—Ä—Ç–∫–∞
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(24), // –°–∏–ª—å–Ω–µ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—è
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                    color: Colors.white, // –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.refresh, color: Colors.white),
                  onPressed: _refreshProgress,
                  iconSize: 20,
                ),
              ],
            ),
            const SizedBox(height: 16),
            LinearProgressIndicator(
              value: _progress['accuracy'],
              minHeight: 12,
              backgroundColor: Colors.grey[800],
              color: _getProgressColor(_progress['accuracy']),
              borderRadius: BorderRadius.circular(6),
            ),
            const SizedBox(height: 8),
            Text(
              '$accuracy% –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π',
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Colors.white70, // –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π —Ç–µ–∫—Å—Ç
              ),
              textAlign: TextAlign.end,
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildStatItem(
                  context,
                  value: _progress['total'].toString(),
                  label: '–í—Å—å–æ–≥–æ',
                  icon: Icons.format_list_numbered,
                  color: Color(0xFFD7FF56), // –°–∞–ª–∞—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä
                ),
                _buildStatItem(
                  context,
                  value: _progress['correct'].toString(),
                  label: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ',
                  icon: Icons.check_circle,
                  color: Colors.green,
                ),
                _buildStatItem(
                  context,
                  value: _progress['wrong'].toString(),
                  label: '–ü–æ–º–∏–ª–∫–∏',
                  icon: Icons.error_outline,
                  color: Colors.red,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Color _getProgressColor(double accuracy) {
    if (accuracy > 0.7) return Colors.green;
    if (accuracy > 0.4) return Colors.orange;
    return Colors.red;
  }

  Widget _buildStatItem(
      BuildContext context, {
        required String value,
        required String label,
        required IconData icon,
        required Color color,
      }) {
    return Column(
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: color.withOpacity(0.2),
            shape: BoxShape.circle,
          ),
          child: Icon(icon, size: 20, color: color),
        ),
        const SizedBox(height: 4),
        Text(
          value,
          style: Theme.of(context).textTheme.titleLarge?.copyWith(
            fontWeight: FontWeight.bold,
            color: color,
          ),
        ),
        Text(
          label,
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
            color: Colors.white70, // –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π —Ç–µ–∫—Å—Ç
          ),
        ),
      ],
    );
  }
}

// lib/features/settings/ui/settings_page.dart
import 'package:flutter/material.dart';
import 'package:impulse/core/services/api_client.dart';

class SettingsPage extends StatefulWidget {
  final String? userId;

  const SettingsPage({super.key, required this.userId});

  @override
  State<SettingsPage> createState() => _SettingsPageState();
}

class _SettingsPageState extends State<SettingsPage> {
  bool _darkMode = false;
  bool _notifications = true;
  bool _soundEffects = true;

  Future<void> _resetProgress() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å?'),
        content: const Text('–£—Å—ñ –≤–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ. –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('–°–∫–∞—Å—É–≤–∞—Ç–∏'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('–°–∫–∏–Ω—É—Ç–∏', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        final client = ApiClient(userId: widget.userId);
        // TODO: –î–æ–¥–∞—Ç–∏ –º–µ—Ç–æ–¥ resetProgress –≤ ApiClient
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ü—Ä–æ–≥—Ä–µ—Å —Å–∫–∏–Ω—É—Ç–æ')),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF1C1C1E), // –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
      appBar: AppBar(
        title: const Text('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'),
        backgroundColor: Color(0xFF1C1C1E), // –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          const Text('–ó–∞–≥–∞–ª—å–Ω—ñ', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white)),
          SwitchListTile(
            title: const Text('–¢–µ–º–Ω–∞ —Ç–µ–º–∞', style: TextStyle(color: Colors.white)),
            value: _darkMode,
            onChanged: (value) => setState(() => _darkMode = value),
          ),
          SwitchListTile(
            title: const Text('–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è', style: TextStyle(color: Colors.white)),
            value: _notifications,
            onChanged: (value) => setState(() => _notifications = value),
          ),
          SwitchListTile(
            title: const Text('–ó–≤—É–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏', style: TextStyle(color: Colors.white)),
            value: _soundEffects,
            onChanged: (value) => setState(() => _soundEffects = value),
          ),
          const Divider(color: Colors.grey),
          const Text('–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white)),
          ListTile(
            title: const Text('–°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å', style: TextStyle(color: Colors.white)),
            trailing: const Icon(Icons.delete, color: Colors.white),
            onTap: _resetProgress,
          ),
          const Divider(color: Colors.grey),
          const Text('–ü—Ä–æ –¥–æ–¥–∞—Ç–æ–∫', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white)),
          ListTile(
            title: const Text('–í–µ—Ä—Å—ñ—è', style: TextStyle(color: Colors.white)),
            subtitle: const Text('1.0.0', style: TextStyle(color: Colors.white70)),
            trailing: const Icon(Icons.info, color: Colors.white),
          ),
        ],
      ),
    );
  }
}

// lib/features/themes/ui/theme_list_page.dart
import 'package:flutter/material.dart';
import 'package:impulse/core/services/api_client.dart';
import 'package:impulse/data/models/theme_model.dart';
import 'package:impulse/features/data/theme_repository.dart';
import 'package:impulse/features/ticket/ui/ticket_page.dart';
import 'theme_tile.dart';

class ThemeListPage extends StatefulWidget {
  final String? telegramUserId;

  const ThemeListPage({super.key, required this.telegramUserId});

  @override
  State<ThemeListPage> createState() => _ThemeListPageState();
}

class _ThemeListPageState extends State<ThemeListPage> {
  late final ThemeRepository _repository;
  late Future<List<ThemeModel>> _themesFuture;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    final apiClient = ApiClient(userId: widget.telegramUserId);
    _repository = ThemeRepository(apiClient: apiClient);
    _themesFuture = _loadThemesWithProgress();
  }

  Future<List<ThemeModel>> _loadThemesWithProgress() async {
    try {
      var themes = await _repository.loadThemes();

      List<ThemeModel> updatedThemes = [];
      for (var theme in themes) {
        final progress = await _repository.loadThemeProgress(theme.index);
        updatedThemes.add(theme.copyWith(
          lastAnsweredIndex: progress['last_question'],
          accuracy: progress['accuracy'],
        ));
      }

      if (mounted) {
        setState(() => _isLoading = false);
      }
      return updatedThemes;
    } catch (e) {
      if (mounted) {
        setState(() => _isLoading = false);
      }
      rethrow;
    }
  }

  Future<void> _refreshThemes() async {
    setState(() => _isLoading = true);
    try {
      final updatedFuture = _loadThemesWithProgress();
      setState(() {
        _themesFuture = updatedFuture;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF1C1C1E), // –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
      appBar: AppBar(
        title: const Text('–¢–µ–º–∏'),
        backgroundColor: Color(0xFF1C1C1E), // –¢–µ–º–Ω–∏–π —Ñ–æ–Ω
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _refreshThemes,
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : FutureBuilder<List<ThemeModel>>(
        future: _themesFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.error_outline, size: 48, color: Colors.red),
                  const SizedBox(height: 16),
                  Text(
                    '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–º',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      color: Colors.white, // –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
                    ),
                  ),
                  const SizedBox(height: 8),
                  ElevatedButton(
                    onPressed: _refreshThemes,
                    child: const Text('–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É'),
                  ),
                ],
              ),
            );
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.book, size: 48, color: Colors.grey),
                  const SizedBox(height: 16),
                  Text(
                    '–¢–µ–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      color: Colors.white, // –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
                    ),
                  ),
                  const SizedBox(height: 8),
                  ElevatedButton(
                    onPressed: _refreshThemes,
                    child: const Text('–û–Ω–æ–≤–∏—Ç–∏'),
                  ),
                ],
              ),
            );
          }

          final themes = snapshot.data!;
          return RefreshIndicator(
            onRefresh: _refreshThemes,
            child: ListView.separated(
              padding: const EdgeInsets.symmetric(vertical: 16),
              itemCount: themes.length,
              separatorBuilder: (context, index) => const Divider(height: 1, color: Colors.grey),
              itemBuilder: (context, index) {
                final theme = themes[index];
                return ThemeTile(
                  theme: theme,
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => TicketPage(
                          title: theme.name,
                          loader: (client) => client.getThemeQuestions(theme.index),
                          telegramUserId: widget.telegramUserId,
                          startFromIndex: theme.lastAnsweredIndex,
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          );
        },
      ),
    );
  }
}

// lib/features/themes/ui/theme_tile.dart
import 'package:flutter/material.dart';
import 'package:impulse/data/models/theme_model.dart';
import '../../../app_theme.dart';

class ThemeTile extends StatelessWidget {
  final ThemeModel theme;
  final VoidCallback onTap;

  const ThemeTile({
    super.key,
    required this.theme,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      elevation: 0,
      color: Color(0xFF2C2C2E), // –¢–µ–º–Ω—ñ—à–∞ –∫–∞—Ä—Ç–∫–∞
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(24), // –°–∏–ª—å–Ω–µ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—è
      ),
      child: InkWell(
        borderRadius: BorderRadius.circular(24),
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            children: [
              Container(
                width: 48,
                height: 48,
                decoration: BoxDecoration(
                  color: _getThemeColor(theme.accuracy),
                  shape: BoxShape.circle,
                ),
                child: Center(
                  child: Text(
                    '${theme.index + 1}',
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 18,
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      theme.name,
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.w600,
                        color: Colors.white, // –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      '${theme.questionCount} –ø–∏—Ç–∞–Ω—å',
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: Colors.white70, // –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π —Ç–µ–∫—Å—Ç
                      ),
                    ),
                    if (theme.lastAnsweredIndex != null) ...[
                      const SizedBox(height: 4),
                      Text(
                        '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ –ø–∏—Ç–∞–Ω–Ω—è ${theme.lastAnsweredIndex! + 1}',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          color: Color(0xFFD7FF56), // –°–∞–ª–∞—Ç–æ–≤–∏–π –∫–æ–ª—ñ—Ä
                        ),
                      ),
                    ],
                  ],
                ),
              ),
              const Icon(Icons.chevron_right, color: Colors.white),
            ],
          ),
        ),
      ),
    );
  }

  Color _getThemeColor(double? accuracy) {
    if (accuracy == null) return Colors.grey;
    if (accuracy > 0.7) return Colors.green;
    if (accuracy > 0.4) return Colors.orange;
    return Colors.red;
  }
}

// lib/features/ticket/ui/errors_ticket_page.dart
import 'package:flutter/material.dart';
import 'package:impulse/core/services/api_client.dart';
import 'package:impulse/data/models/question_model.dart';

class ErrorsTicketPage extends StatefulWidget {
  final String? userId;
  final Function onProgressUpdated;

  const ErrorsTicketPage({super.key, required this.userId, required this.onProgressUpdated});

  @override
  State<ErrorsTicketPage> createState() => _ErrorsTicketPageState();
}

class _ErrorsTicketPageState extends State<ErrorsTicketPage> {
  late final ApiClient _client;
  late Future<List<QuestionModel>> _questionsFuture;
  int _currentIndex = 0;
  int? _selectedAnswer;

  @override
  void initState() {
    super.initState();
    _client = ApiClient(userId: widget.userId);
    _loadQuestions();
  }

  Future<void> _loadQuestions() async {
    setState(() {
      _questionsFuture = _client.getErrorQuestions();
    });
  }

  void _nextQuestion() {
    setState(() {
      _currentIndex++;
      _selectedAnswer = null;
    });
  }

  void _handleAnswer(int index, QuestionModel question) async {
    setState(() => _selectedAnswer = index);

    try {
      final isCorrect = index == question.correctIndex;
      await _client.trackQuestionAnswer(question.id, isCorrect);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (widget.onProgressUpdated != null) {
        widget.onProgressUpdated!();
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  Future<void> _toggleFavorite(QuestionModel question) async {
    try {
      await _client.toggleFavorite(question.id, !question.isFavorite);
      setState(() {
        question.isFavorite = !question.isFavorite;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(question.isFavorite
              ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
              : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: $e'),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–û—à–∏–±–∫–∏'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadQuestions,
          ),
        ],
      ),
      body: FutureBuilder<List<QuestionModel>>(
        future: _questionsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (snapshot.hasError) {
            return Center(child: Text('–û—à–∏–±–∫–∞: ${snapshot.error}'));
          }

          final questions = snapshot.data ?? [];

          if (questions.isEmpty) {
            return const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text('–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏'),
                  SizedBox(height: 16),
                  Text('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å'),
                ],
              ),
            );
          }

          if (_currentIndex >= questions.length) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Text('–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!'),
                  ElevatedButton(
                    onPressed: _loadQuestions,
                    child: const Text('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'),
                  ),
                ],
              ),
            );
          }

          final question = questions[_currentIndex];
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                if (question.image != null && question.image!.isNotEmpty)
                  Padding(
                    padding: const EdgeInsets.only(bottom: 16),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(8),
                      child: Image.network(
                        '${AppConfig.apiBaseUrl}/image?path=${question.image!}',
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                Text(
                  '–í–æ–ø—Ä–æ—Å ${_currentIndex + 1} –∏–∑ ${questions.length}',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Theme.of(context).colorScheme.onSurface.withOpacity(0.6),
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  question.question,
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 24),
                ...question.answers.asMap().entries.map((entry) {
                  final index = entry.key;
                  final answer = entry.value;
                  final isCorrect = index == question.correctIndex;
                  final isSelected = _selectedAnswer == index;

                  Color? borderColor;
                  Color? backgroundColor;
                  IconData? icon;
                  Color? iconColor;

                  if (_selectedAnswer != null) {
                    if (isCorrect) {
                      borderColor = Colors.green;
                      backgroundColor = Colors.green.withOpacity(0.1);
                      icon = Icons.check;
                      iconColor = Colors.green;
                    } else if (isSelected) {
                      borderColor = Colors.red;
                      backgroundColor = Colors.red.withOpacity(0.1);
                      icon = Icons.close;
                      iconColor = Colors.red;
                    }
                  }

                  return Padding(
                    padding: const EdgeInsets.only(bottom: 12),
                    child: OutlinedButton(
                      style: OutlinedButton.styleFrom(
                        side: BorderSide(
                          color: borderColor ?? Theme.of(context).colorScheme.outline,
                        ),
                        backgroundColor: backgroundColor,
                        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                        alignment: Alignment.centerLeft,
                      ),
                      onPressed: _selectedAnswer == null
                          ? () => _handleAnswer(index, question)
                          : null,
                      child: Row(
                        children: [
                          Expanded(
                            child: Text(
                              answer,
                              style: Theme.of(context).textTheme.bodyLarge,
                            ),
                          ),
                          if (icon != null)
                            Icon(icon, size: 20, color: iconColor),
                        ],
                      ),
                    ),
                  );
                }).toList(),
                if (_selectedAnswer != null) ...[
                  const SizedBox(height: 24),
                  Card(
                    color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                    margin: EdgeInsets.zero,
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          Text(
                            '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:',
                            style: Theme.of(context).textTheme.bodySmall?.copyWith(
                              color: Theme.of(context).colorScheme.primary,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(height: 8),
                          Text(
                            question.explanation,
                            style: Theme.of(context).textTheme.bodyMedium,
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      ElevatedButton(
                        onPressed: _nextQuestion,
                        child: const Text('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'),
                      ),
                      IconButton(
                        icon: Icon(
                          question.isFavorite ? Icons.star : Icons.star_border,
                          color: Colors.amber,
                        ),
                        onPressed: () => _toggleFavorite(question),
                      ),
                    ],
                  ),
                ],
              ],
            ),
          );
        },
      ),
    );
  }
}

import 'package:flutter/material.dart';
import 'package:impulse/core/services/api_client.dart';
import 'package:impulse/data/models/question_model.dart';

class RandomTicketPage extends StatefulWidget {
  final String? telegramUserId;
  final Function onProgressUpdated;

  const RandomTicketPage({super.key, required this.telegramUserId, required this.onProgressUpdated});

  @override
  State<RandomTicketPage> createState() => _RandomTicketPageState();
}

class _RandomTicketPageState extends State<RandomTicketPage> {
  late final ApiClient _client;
  late Future<List<QuestionModel>> _questionsFuture;
  int _currentIndex = 0;
  int? _selectedAnswer;

  @override
  void initState() {
    super.initState();
    _client = ApiClient(userId: widget.telegramUserId);
    _loadQuestions();
  }

  Future<void> _loadQuestions() async {
    setState(() {
      _questionsFuture = _client.getTicketRandom();
    });
  }

  void _handleAnswer(int index, QuestionModel question) async {
    setState(() => _selectedAnswer = index);

    try {
      final isCorrect = index == question.correctIndex;
      await _client.trackQuestionAnswer(question.id, isCorrect);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (widget.onProgressUpdated != null) {
        widget.onProgressUpdated!();
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }

  void _nextQuestion() {
    setState(() {
      _currentIndex++;
      _selectedAnswer = null;
    });
  }

  Future<void> _toggleFavorite(QuestionModel question) async {
    try {
      await _client.toggleFavorite(question.id, !question.isFavorite);
      setState(() {
        question.isFavorite = !question.isFavorite;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(question.isFavorite
              ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
              : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: $e'),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–°–ª—É—á–∞–π–Ω—ã–π –±–∏–ª–µ—Ç'),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadQuestions,
            tooltip: '–û–±–Ω–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã',
          ),
        ],
      ),
      body: FutureBuilder<List<QuestionModel>>(
        future: _questionsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
              child: CircularProgressIndicator(),
            );
          } else if (snapshot.hasError) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.error_outline, size: 48, color: Colors.red),
                  SizedBox(height: 16),
                  Text(
                    '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  SizedBox(height: 8),
                  ElevatedButton(
                    onPressed: _loadQuestions,
                    child: Text('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'),
                  ),
                ],
              ),
            );
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.help_outline, size: 48, color: Colors.grey),
                  SizedBox(height: 16),
                  Text(
                    '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  SizedBox(height: 8),
                  Text(
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫',
                    style: Theme.of(context).textTheme.bodyMedium,
                  ),
                ],
              ),
            );
          }

          final questions = snapshot.data!;
          if (_currentIndex >= questions.length) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.check_circle, size: 48, color: Colors.green),
                  SizedBox(height: 16),
                  Text(
                    '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!',
                    style: Theme.of(context).textTheme.titleLarge,
                  ),
                  SizedBox(height: 24),
                  ElevatedButton.icon(
                    icon: Icon(Icons.refresh),
                    label: Text('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'),
                    onPressed: _loadQuestions,
                  ),
                ],
              ),
            );
          }

          final question = questions[_currentIndex];
          return SingleChildScrollView(
            padding: EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                if (question.image != null && question.image!.isNotEmpty)
                  Padding(
                    padding: EdgeInsets.only(bottom: 16),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(8),
                      child: Image.network(
                        '${AppConfig.apiBaseUrl}/image?path=${question.image!}',
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                Text(
                  '–í–æ–ø—Ä–æ—Å ${_currentIndex + 1} –∏–∑ ${questions.length}',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Theme.of(context).colorScheme.onSurface.withOpacity(0.6),
                  ),
                ),
                SizedBox(height: 8),
                Text(
                  question.question,
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.w600,
                  ),
                ),
                SizedBox(height: 24),
                ...question.answers.asMap().entries.map((entry) {
                  final index = entry.key;
                  final answer = entry.value;
                  final isCorrect = index == question.correctIndex;
                  final isSelected = _selectedAnswer == index;

                  Color? borderColor;
                  Color? backgroundColor;
                  IconData? icon;
                  Color? iconColor;

                  if (_selectedAnswer != null) {
                    if (isCorrect) {
                      borderColor = Colors.green;
                      backgroundColor = Colors.green.withOpacity(0.1);
                      icon = Icons.check;
                      iconColor = Colors.green;
                    } else if (isSelected) {
                      borderColor = Colors.red;
                      backgroundColor = Colors.red.withOpacity(0.1);
                      icon = Icons.close;
                      iconColor = Colors.red;
                    }
                  }

                  return Padding(
                    padding: EdgeInsets.only(bottom: 12),
                    child: OutlinedButton(
                      style: OutlinedButton.styleFrom(
                        side: BorderSide(
                          color: borderColor ?? Theme.of(context).colorScheme.outline,
                        ),
                        backgroundColor: backgroundColor,
                        padding: EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                        alignment: Alignment.centerLeft,
                      ),
                      onPressed: _selectedAnswer == null
                          ? () => _handleAnswer(index, question)
                          : null,
                      child: Row(
                        children: [
                          Expanded(
                            child: Text(
                              answer,
                              style: Theme.of(context).textTheme.bodyLarge,
                            ),
                          ),
                          if (icon != null)
                            Icon(icon, size: 20, color: iconColor),
                        ],
                      ),
                    ),
                  );
                }).toList(),
                if (_selectedAnswer != null) ...[
                  SizedBox(height: 24),
                  Card(
                    color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                    margin: EdgeInsets.zero,
                    child: Padding(
                      padding: EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          Text(
                            '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:',
                            style: Theme.of(context).textTheme.bodySmall?.copyWith(
                              color: Theme.of(context).colorScheme.primary,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          SizedBox(height: 8),
                          Text(
                            question.explanation,
                            style: Theme.of(context).textTheme.bodyMedium,
                          ),
                        ],
                      ),
                    ),
                  ),
                  SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      ElevatedButton(
                        onPressed: _nextQuestion,
                        child: Text('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'),
                      ),
                      IconButton(
                        icon: Icon(
                          question.isFavorite ? Icons.star : Icons.star_border,
                          color: Colors.amber,
                        ),
                        onPressed: () => _toggleFavorite(question),
                      ),
                    ],
                  ),
                ],
              ],
            ),
          );
        },
      ),
    );
  }
}

// lib/features/ticket/ui/ticket_page.dart
import 'package:flutter/material.dart';
import 'package:impulse/core/services/api_client.dart';
import 'package:impulse/data/models/question_model.dart';

class TicketPage extends StatefulWidget {
  final String title;
  final Future<List<QuestionModel>> Function(ApiClient) loader;
  final String? telegramUserId;
  final int? startFromIndex;

  const TicketPage({
    super.key,
    required this.title,
    required this.loader,
    this.telegramUserId,
    this.startFromIndex,
  });

  @override
  State<TicketPage> createState() => _TicketPageState();
}

class _TicketPageState extends State<TicketPage> {
  late final ApiClient _client;
  late Future<List<QuestionModel>> _questionsFuture;
  int _currentIndex = 0;
  int? _selectedAnswer;
  List<QuestionModel>? _questions;

  @override
  void initState() {
    super.initState();
    _client = ApiClient(userId: widget.telegramUserId);
    _questionsFuture = widget.loader(_client);
    if (widget.startFromIndex != null) {
      _currentIndex = widget.startFromIndex!;
    }
  }

  void _nextQuestion() {
    setState(() {
      _currentIndex++;
      _selectedAnswer = null;
    });
  }

  void _handleAnswer(int index, QuestionModel question) async {
    setState(() => _selectedAnswer = index);

    try {
      final isCorrect = index == question.correctIndex;
      await _client.trackQuestionAnswer(question.id, isCorrect);

    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error: $e')));
    }
  }

  Future<void> _toggleFavorite(QuestionModel question) async {
    try {
      await _client.toggleFavorite(question.id, !question.isFavorite);
      setState(() {
        question.isFavorite = !question.isFavorite;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            question.isFavorite
                ? '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'
                : '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
          ),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('–û—à–∏–±–∫–∞: $e')));
    }
  }

  Widget _buildQuestionNavigation() {
    if (_questions == null) return const SizedBox();

    return SizedBox(
      height: 50,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _questions!.length,
        itemBuilder: (context, index) {
          final question = _questions![index];
          bool isAnswered = question.wasAnsweredCorrectly != null;
          bool isCorrect = question.wasAnsweredCorrectly == true;

          return GestureDetector(
            onTap: () {
              setState(() {
                _currentIndex = index;
                _selectedAnswer = null;
              });
            },
            child: Container(
              width: 40,
              height: 40,
              margin: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color:
                    _currentIndex == index
                        ? Colors.blue
                        : isAnswered
                        ? isCorrect
                            ? Colors.green
                            : Colors.red
                        : Colors.grey[300],
                borderRadius: BorderRadius.circular(8),
              ),
              child: Center(
                child: Text(
                  '${index + 1}',
                  style: TextStyle(
                    color: _currentIndex == index ? Colors.white : Colors.black,
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body: FutureBuilder<List<QuestionModel>>(
        future: _questionsFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('–û—à–∏–±–∫–∞: ${snapshot.error}'));
          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(child: Text('–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤'));
          }

          _questions = snapshot.data!;

          if (_currentIndex >= _questions!.length) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Text('–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!'),
                  ElevatedButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'),
                  ),
                ],
              ),
            );
          }

          final question = _questions![_currentIndex];
          return Column(
            children: [
              _buildQuestionNavigation(),
              Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      if (question.image != null && question.image!.isNotEmpty)
                        Padding(
                          padding: const EdgeInsets.only(bottom: 16),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(8),
                            child: Image.network(
                              '${AppConfig.apiBaseUrl}/image?path=${question.image!}',
                              fit: BoxFit.cover,
                            ),
                          ),
                        ),
                      Text(
                        '–í–æ–ø—Ä–æ—Å ${_currentIndex + 1} –∏–∑ ${_questions?.length}',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(
                          color: Theme.of(
                            context,
                          ).colorScheme.onSurface.withOpacity(0.6),
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        question.question,
                        style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 24),
                      ...question.answers.asMap().entries.map((entry) {
                        final index = entry.key;
                        final answer = entry.value;
                        final isCorrect = index == question.correctIndex;
                        final isSelected = _selectedAnswer == index;

                        Color? borderColor;
                        Color? backgroundColor;
                        IconData? icon;
                        Color? iconColor;

                        if (_selectedAnswer != null) {
                          if (isCorrect) {
                            borderColor = Colors.green;
                            backgroundColor = Colors.green.withOpacity(0.1);
                            icon = Icons.check;
                            iconColor = Colors.green;
                          } else if (isSelected) {
                            borderColor = Colors.red;
                            backgroundColor = Colors.red.withOpacity(0.1);
                            icon = Icons.close;
                            iconColor = Colors.red;
                          }
                        }

                        return Padding(
                          padding: const EdgeInsets.only(bottom: 12),
                          child: OutlinedButton(
                            style: OutlinedButton.styleFrom(
                              side: BorderSide(
                                color:
                                    borderColor ??
                                    Theme.of(context).colorScheme.outline,
                              ),
                              backgroundColor: backgroundColor,
                              padding: const EdgeInsets.symmetric(
                                vertical: 16,
                                horizontal: 16,
                              ),
                              alignment: Alignment.centerLeft,
                            ),
                            onPressed:
                                _selectedAnswer == null
                                    ? () => _handleAnswer(index, question)
                                    : null,
                            child: Row(
                              children: [
                                Expanded(
                                  child: Text(
                                    answer,
                                    style:
                                        Theme.of(context).textTheme.bodyLarge,
                                  ),
                                ),
                                if (icon != null)
                                  Icon(icon, size: 20, color: iconColor),
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                      if (_selectedAnswer != null) ...[
                        const SizedBox(height: 24),
                        Card(
                          color: Theme.of(
                            context,
                          ).colorScheme.primary.withOpacity(0.1),
                          margin: EdgeInsets.zero,
                          child: Padding(
                            padding: const EdgeInsets.all(16),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.stretch,
                              children: [
                                Text(
                                  '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:',
                                  style: Theme.of(
                                    context,
                                  ).textTheme.bodySmall?.copyWith(
                                    color:
                                        Theme.of(context).colorScheme.primary,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                const SizedBox(height: 8),
                                Text(
                                  question.explanation,
                                  style: Theme.of(context).textTheme.bodyMedium,
                                ),
                              ],
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: [
                            ElevatedButton(
                              onPressed: _nextQuestion,
                              child: const Text('–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'),
                            ),
                            IconButton(
                              icon: Icon(
                                question.isFavorite
                                    ? Icons.star
                                    : Icons.star_border,
                                color: Colors.amber,
                              ),
                              onPressed: () => _toggleFavorite(question),
                            ),
                          ],
                        ),
                      ],
                    ],
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}

import 'package:flutter/material.dart';

class AppTheme {
  static const Color primaryColor = Color(0xFF4CAF50); // –ó–µ–ª–µ–Ω—ã–π
  static const Color primaryDark = Color(0xFF388E3C);
  static const Color primaryLight = Color(0xFFC8E6C9);
  static const Color accentColor = Color(0xFFFFC107); // –Ø–Ω—Ç–∞—Ä–Ω—ã–π
  static const Color errorColor = Color(0xFFF44336);
  static const Color successColor = Color(0xFF4CAF50);
  static const Color warningColor = Color(0xFFFF9800);
  static const Color backgroundColor = Color(0xFFF5F5F5);
  static const Color surfaceColor = Colors.white;
  static const Color onPrimary = Colors.white;
  static const Color onSurface = Color(0xFF212121);

  static ThemeData get lightTheme {
    return ThemeData(
      colorScheme: ColorScheme.light(
        primary: primaryColor,
        primaryContainer: primaryDark,
        secondary: accentColor,
        surface: surfaceColor,
        background: backgroundColor,
        error: errorColor,
        onPrimary: onPrimary,
        onSurface: onSurface,
      ),
      scaffoldBackgroundColor: backgroundColor,
      appBarTheme: AppBarTheme(
        backgroundColor: primaryColor,
        elevation: 4,
        centerTitle: true,
        titleTextStyle: const TextStyle(
          fontSize: 22,
          fontWeight: FontWeight.w600,
          color: onPrimary,
        ),
        iconTheme: const IconThemeData(color: onPrimary),
        actionsIconTheme: const IconThemeData(color: onPrimary),
      ),
      cardTheme: CardTheme(
        elevation: 2,
        margin: const EdgeInsets.all(8),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: primaryColor,
          foregroundColor: onPrimary,
          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          textStyle: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
      textButtonTheme: TextButtonThemeData(
        style: TextButton.styleFrom(
          foregroundColor: primaryColor,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: primaryColor,
        foregroundColor: onPrimary,
      ),
      inputDecorationTheme: InputDecorationTheme(
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        filled: true,
        fillColor: Colors.white,
      ),
      textTheme: const TextTheme(
        displayLarge: TextStyle(fontSize: 32, fontWeight: FontWeight.bold),
        displayMedium: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),
        headlineMedium: TextStyle(fontSize: 22, fontWeight: FontWeight.w600),
        titleLarge: TextStyle(fontSize: 20, fontWeight: FontWeight.w600),
        bodyLarge: TextStyle(fontSize: 16),
        bodyMedium: TextStyle(fontSize: 14),
      ),
      useMaterial3: true,
    );
  }
}

import 'dart:html' as html;
import 'dart:js' as js; // –î–æ–±–∞–≤–ª—è–µ–º JS –∏–Ω—Ç–µ—Ä–æ–ø
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb, kDebugMode;
import 'package:impulse/router.dart';
import 'package:impulse/core/config.dart';

import 'package:flutter_web_plugins/url_strategy.dart';
import 'app_theme.dart';
import 'core/services/api_client.dart';
import 'features/home/ui/main_menu_page.dart';

void main() {
  setUrlStrategy(PathUrlStrategy());
  runApp(const ImpulseApp());
}

class ImpulseApp extends StatefulWidget {
  const ImpulseApp({super.key});

  @override
  State<ImpulseApp> createState() => _ImpulseAppState();
}

class _ImpulseAppState extends State<ImpulseApp> {
  String? _telegramInitData;
  String? _telegramUserId;
  bool _isLoading = true;
  String? _error;

  @override
  void initState() {
    super.initState();
    _initializeApp();
  }

  Future<void> _initializeApp() async {
    try {
      if (kIsWeb) {
        await _initTelegramWebApp();
      } else {
        setState(() {
          _isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        _error = e.toString();
        _isLoading = false;
      });
      debugPrint('Initialization error: $e');
    }
  }

  Future<void> _initTelegramWebApp() async {
    try {
      final initData = kDebugMode ? _getDebugInitData() : _getProductionInitData();
      if (initData == null) {
        throw Exception('Telegram init data not available');
      }

      final userId = _extractTelegramUserId(initData);
      if (userId == null) {
        throw Exception('Failed to extract user ID');
      }

      setState(() {
        _telegramInitData = initData;
        _telegramUserId = userId;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _error = e.toString();
        _isLoading = false;
      });
      rethrow;
    }
  }

  String? _getProductionInitData() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ JS –∏–Ω—Ç–µ—Ä–æ–ø
      final jsContext = js.context;
      if (jsContext.hasProperty('Telegram') &&
          jsContext['Telegram'].hasProperty('WebApp') &&
          jsContext['Telegram']['WebApp'].hasProperty('initData')) {
        return jsContext['Telegram']['WebApp']['initData'] as String?;
      }

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      final uri = Uri.base;
      return uri.queryParameters['tgWebAppData'];
    } catch (e) {
      debugPrint('Error getting production init data: $e');
      return null;
    }
  }

  String _getDebugInitData() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return 'query_id%3Ddebug%26user%3D%257B%2522id%2522%253A123456789%252C%2522first_name%2522%253A%2522Dev%2522%257D%26auth_date%3D9999999999%26hash%3Dfake';
  }

  String? _extractTelegramUserId(String data) {
    try {
      final decoded = Uri.decodeFull(data);
      final userParam = RegExp(r'user=([^&]+)').firstMatch(decoded)?.group(1);
      if (userParam == null) return null;

      final userJsonRaw = Uri.decodeFull(Uri.decodeFull(userParam));
      final map = json.decode(userJsonRaw) as Map<String, dynamic>;
      return map['id'].toString();
    } catch (e) {
      debugPrint('Failed to parse telegram user id: $e');
      return null;
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Impulse',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      initialRoute: '/',
      home: _buildHomeScreen(),
      onGenerateRoute: (settings) => AppRouter.generateRoute(
        settings,
        telegramInitData: _telegramInitData,
        telegramUserId: _telegramUserId,
      ),
    );
  }

  Widget _buildHomeScreen() {
    if (_isLoading) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    if (_error != null) {
      return Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Error: $_error'),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _initializeApp,
                child: const Text('Retry'),
              ),
            ],
          ),
        ),
      );
    }

    return MainMenuPage(
      userId: _telegramUserId,
    );
  }
}

import 'package:flutter/material.dart';
import 'package:impulse/features/home/ui/main_menu_page.dart';

class AppRouter {
  static Route<dynamic> generateRoute(
      RouteSettings settings, {
        String? telegramInitData,
        String? telegramUserId, // –ï–¥–∏–Ω–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
      }) {
    switch (settings.name) {
      case '/':
        return MaterialPageRoute(
          builder: (_) => MainMenuPage(
            userId: telegramUserId, // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
          ),
        );
      default:
        return MaterialPageRoute(
          builder: (_) => Scaffold(
            body: Center(
              child: Text('Route not found: ${settings.name}'),
            ),
          ),
        );
    }
  }
}